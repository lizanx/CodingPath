@page "/"
@using DocumentFormat.OpenXml
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Spreadsheet
@using ExcelReader.Models
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Components.Web.Virtualization

<PageTitle>Excel Reader</PageTitle>

<InputFile accept=".xlsx" OnChange="@SelectFile" />

@if (file is not null)
{
    if (errorMessage is null)
    {
        <p>
            <div>
                File Name: @file.Name
            </div>
            <div>
                File Size: @file.Size.ToString("N0") bytes
            </div>
            <div>
                Content Type: @file.ContentType
            </div>
        </p>

        <button type="button" @onclick="ReadFileAsync">Read File</button>

        @if (!loaded)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <p>Rows: @rowCount</p>

            <div style="height: 200px;overflow-y: scroll" tabindex="-1">
                <table width="250">
                    <thead style="position: sticky; top: 0; background-color: silver">
                        <tr>
                            <th>Year</th>
                            <th width="255">Country</th>
                            <th>Gold</th>
                            <th>Silver</th>
                            <th>Bronze</th>
                        </tr>
                    </thead>

                    <tbody>
                        <Virtualize Items="@allMedals" SpacerElement="tr">
                            <tr>
                                <td align="center">@context.Year</td>
                                <td>@context.Country</td>
                                <td align="center">@context.Gold</td>
                                <td align="center">@context.Silver</td>
                                <td align="center">@context.Bronze</td>
                            </tr>
                        </Virtualize>
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <p><em>@errorMessage</em></p>
    }
}

@code {
    private IBrowserFile? file;
    private string? errorMessage;
    private const int MAX_FILE_SIZE = 50_000;
    private bool loaded;
    private int rowCount;
    private Collection<Medals> allMedals = [];

    private void SelectFile(InputFileChangeEventArgs args)
    {
        file = args.File;
        errorMessage = null;

        if (file.Size > MAX_FILE_SIZE
            || file.ContentType != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        {
            errorMessage = $"Invalid file: size = {file.Size}, type = {file.ContentType}";
        }
    }

    private async Task ReadFileAsync()
    {
        try
        {
            using var stream = new MemoryStream();
            await file!.OpenReadStream(MAX_FILE_SIZE).CopyToAsync(stream);

            SpreadsheetDocument doc = SpreadsheetDocument.Open(stream, false);
            WorkbookPart wbPart = doc.WorkbookPart!;

            var sheet = wbPart.Workbook
                .Descendants<Sheet>()
                .Where(s => s.Name == "olympic_medals")
                .FirstOrDefault()!;
            
            WorksheetPart wsPart = (WorksheetPart)(wbPart.GetPartById(sheet.Id!));

            SheetData sheetData = wsPart.Worksheet.Elements<SheetData>().First();
            
            rowCount = sheetData.Elements<Row>().Count();
            
            loaded = true;

            var stringTable = wbPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();
            
            foreach (Row r in sheetData.Elements<Row>())
            {
                if (r.RowIndex! == 1)
                {
                    continue;
                }

                int col = 1;
                var medals = new Medals();

                foreach (Cell c in r.Elements<Cell>())
                {
                    string value = c.InnerText;

                    if (c.DataType != null)
                    {
                        if (c.DataType.Value == CellValues.SharedString)
                        {
                            value = stringTable!.SharedStringTable.ElementAt(int.Parse(value)).InnerText;
                        }
                    }

                    switch (col)
                    {
                        case 1:
                            medals.Year = int.Parse(value);
                            break;
                        case 2:
                            medals.Country = value;
                            break;
                        case 3:
                            medals.Gold = int.Parse(value);
                            break;
                        case 4:
                            medals.Silver = int.Parse(value);
                            break;
                        case 5:
                            medals.Bronze = int.Parse(value);
                            break;
                        default:
                            break;
                    }

                    col += 1;
                }

                allMedals.Add(medals);
            }
        }
        catch (Exception e)
        {
            errorMessage = $"Invalid Excel file: {e.Message}";
        }
    }
}
