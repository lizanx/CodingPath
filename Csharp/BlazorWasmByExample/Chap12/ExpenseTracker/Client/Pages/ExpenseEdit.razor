@page "/expense"
@page "/expense/{id:int}"
@using Microsoft.AspNetCore.Components.Forms
@using ExpenseTracker.Shared
@inject HttpClient client
@inject NavigationManager nav
@inject IJSRuntime js

<NavigationLock ConfirmExternalNavigation="true" OnBeforeInternalNavigation="HandleBeforeInternalNav" />

@if (id == 0)
{
    <h2>Add Expense</h2>
}
else
{
    <h2>Edit Expense</h2>
}

@if (!ready)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="expense" OnValidSubmit="HandleValidSubmit">
        <div class="mb-3">
            <label>
                Date
                <InputDate @bind-Value="expense!.Date" class="form-control" />
            </label>
        </div>
        <div class="mb-3">
            <label>
                Vendor
                <InputText @bind-Value="expense.Vendor" class="form-control" />
            </label>
        </div>
        <div class="mb-3">
            <label>
                Description
                <InputText @bind-Value="expense.Description" class="form-control" />
            </label>
        </div>
        <div class="mb-3">
            <label>
                Expense Type
                <InputSelect @bind-Value="expense.ExpenseTypeId" class="form-control">
                    <option value=""></option>
                    @foreach (ExpenseType type in types)
                    {
                        <option value="@type.Id">
                            @type.Type
                        </option>
                    }
                </InputSelect>
            </label>
        </div>
        <div class="mb-3">
            <label>
                Amount
                <InputNumber @bind-Value="expense.Amount" class="form-control" />
            </label>
        </div>
        <div class="mb-3">
            <label>
                Paid?
                <InputCheckbox @bind-Value="expense.Paid" class="form-check-input mx-1" />
            </label>
        </div>

        <div class="pt-2 pb-2">
            <button type="submit" class="btn btn-primary mr-auto">
                Save
            </button>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>

    <div>
        @error
    </div>
}

@code {
    [Parameter]
    public int id { get; set; }

    private bool ready;
    private string? error;
    private Expense? expense = new();
    private List<ExpenseType>? types;

    protected override async Task OnInitializedAsync()
    {
        types = await client.GetFromJsonAsync<List<ExpenseType>>("api/ExpenseTypes");

        if (id > 0)
        {
            try
            {
                var result = await client.GetFromJsonAsync<Expense>($"api/Expenses/{id}");
                if (result is not null)
                {
                    expense = result;
                }
            }
            catch (Exception)
            {
                nav.NavigateTo("/");
            }
        }

        ready = true;
    }

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;

        if (expense!.Id == 0)
        {
            response = await client.PostAsJsonAsync("api/Expenses", expense);
        }
        else
        {
            response = await client.PutAsJsonAsync($"api/Expenses/{expense.Id}", expense);
        }

        if (response.IsSuccessStatusCode)
        {
            nav.NavigateTo("/");
        }
        else
        {
            error = response.ReasonPhrase;
        }
    }

    private async Task HandleBeforeInternalNav(LocationChangingContext context)
    {
        if (context.IsNavigationIntercepted)
        {
            var confirm = await js.InvokeAsync<bool>("confirm", "Are you sure you're ready to leave?");

            if (!confirm)
            {
                context.PreventNavigation();
            }
        }
    }
}
