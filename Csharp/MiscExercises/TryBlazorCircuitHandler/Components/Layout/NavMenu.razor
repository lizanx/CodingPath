@rendermode InteractiveServer
@inject ConcurrentUsersService ConcurrentUsersService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TryBlazorCircuitHandler</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <div style="color: white">Active Users: @ConcurrentUsersService.UserCount</div>
        </div>
    </nav>
</div>

@code
{
    public int Users { get; set; }

    protected override void OnInitialized()
    {
        ConcurrentUsersService.OnUsersChanged += UpdateUsers;
        UpdateUsers(ConcurrentUsersService.UserCount);
        base.OnInitialized();
    }

    private void UpdateUsers(int users)
    {
        InvokeAsync(() =>
        {
            Users = ConcurrentUsersService.UserCount;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        ConcurrentUsersService.OnUsersChanged -= UpdateUsers;
    }
}
