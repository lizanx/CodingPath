@using BlazingTrails.ComponentLibrary.Map
@using BlazingTrails.Client.Features.State
@using MediatR
@inject IMediator Mediator
@inject AppState AppState

<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />
    <FormStateTracker />

    <FormSection Title="Basic Details"
        HelpText="This information is used to identify the trail and can be searched to help hikers find it.">
        <FormFieldSet Width="col-6">
            <label for="trailName" class="font-weight-bold text-secondary">
                Name
            </label>
            <InputText class="form-control" id="trailName" @bind-Value="_trail.Name" />
            <ValidationMessage For="@(() => _trail.Name)" />
        </FormFieldSet>

        <FormFieldSet>
            <label for="trailDescription" class="font-weight-bold text-secondary">
                Description
            </label>
            <InputTextArea rows="6" class="form-control" id="trailDescription" @bind-Value="_trail.Description" />
            <ValidationMessage For="@(() => _trail.Description)" />
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="trailLocation" class="font-weight-bold text-secondary">
                Location
            </label>
            <InputText class="form-control" id="trailLocation" @bind-Value="_trail.Location" />
            <ValidationMessage For="@(() => _trail.Location)" />
        </FormFieldSet>

        <FormFieldSet>
            <label class="font-weight-bold text-secondary" for="trailImage">
                Image
            </label>
            @if (string.IsNullOrWhiteSpace(_trail.Image))
            {
                <InputFile id="trailImage" accept=".png,.jpg,.jpeg" OnChange="LoadTrailImage"
                class="form-control-file" />
            }
            else
            {
                <div class="card bg-dark text-white">
                    <img src="images/@_trail.Image" />
                    <div class="card-img-overlay">
                        <button class="btn btn-primary btn-sm" @onclick="RemoveTrailImage">
                            Remove
                        </button>
                    </div>
                </div>
            }
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Difficulty"
    HelpText="Help other hikers out by telling them the length of the trail is how long it might take them.">
        <FormFieldSet Width="col-3">
            <label for="trailLength" class="font-weight-bold text-secondary">
                Length (km)
            </label>
            <InputNumber class="form-control" id="trailLength" @bind-Value="_trail.Length" />
            <ValidationMessage For="@(() => _trail.Length)" />
        </FormFieldSet>

        <FormFieldSet Width="col-5">
            <label for="trailTime" class="font-weight-bold text-secondary">
                Time
            </label>
            <InputTime id="trailTime" @bind-Value="_trail.TimeInMinutes" />
            <ValidationMessage For="@(() => _trail.TimeInMinutes)" />
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Route"
        HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">
        <InputRouteMap @bind-Value="_trail.Waypoints" />
        <ValidationMessage For="@(() => _trail.Waypoints)" />
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary" type="button"
                    @onclick="@(() => ResetForm())">
                    Reset
                </button>
                <button class="btn btn-primary" type="submit">
                    Submit
                </button>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter, EditorRequired]
    public Func<TrailDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;
    [Parameter]
    public TrailDto? Trail { get; set; }
    private TrailDto _trail = new();
    private EditContext _editContext = default!;
    private IBrowserFile? _trailImage;

    protected override void OnParametersSet()
    {
        if (Trail != null)
        {
            _trail.Id = Trail.Id;
            _trail.Name = Trail.Name;
            _trail.Description = Trail.Description;
            _trail.Location = Trail.Location;
            _trail.TimeInMinutes = Trail.TimeInMinutes;
            _trail.Length = Trail.Length;
            _trail.Image = Trail.Image;
            _trail.ImageAction = ImageAction.None;

            _trail.Waypoints.Clear();
            _trail.Waypoints.AddRange(Trail.Waypoints.Select(wp =>
                new TrailDto.WaypointDto(wp.Latitude, wp.Longitude)));
        }
        else
        {
            _trail = AppState.GetTrail();
        }

        _editContext = new(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    private void LoadTrailImage(InputFileChangeEventArgs args)
    {
        _trailImage = args.File;
        _trail.ImageAction = ImageAction.Add;
    }
    
    private async Task SubmitForm() =>
        await OnSubmit(_trail, _trailImage);

    public void ResetForm()
    {
        AppState.ClearTrail();
        _trail = new();
        _editContext = new(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
        _trailImage = null;
    }

    private void RemoveTrailImage(MouseEventArgs args)
    {
        _trail.Image = null;
        _trail.ImageAction = ImageAction.Remove;
    }
}
