@page "/lifecycle"
@implements IDisposable

<h1>Component Lifecycle</h1>
<p>Check the brower console for details...</p>

<p>Greetings: </p>
<ul>
    @foreach (var greeting in _greetings)
    {
        <li>@greeting</li>
    }
</ul>

@code {
    private List<string> _greetings = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine("SetParametersAsync: Begin");
        await base.SetParametersAsync(parameters);
        Console.WriteLine("SetParametersAsync: End");
    }

    protected override void OnInitialized() =>
        Console.WriteLine("OnInitialized");
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        _greetings.Add("Welcome");
        await Task.Delay(2000);
        _greetings.Add("to");
        @* StateHasChanged(); *@
        await Task.Delay(2000);
        _greetings.Add("Blazor in Action");
    }
    
    protected override void OnParametersSet() =>
        Console.WriteLine("OnParametersSet");
    
    protected override async Task OnParametersSetAsync() =>
        await Task.Run(() => Console.WriteLine("OnParametersSetAsync"));
    
    protected override void OnAfterRender(bool firstRender) =>
        Console.WriteLine("OnAfterRender: firstRender = {0}", firstRender);
    
    protected override async Task OnAfterRenderAsync(bool firstRender) =>
        await Task.Run(() => Console.WriteLine("OnAfterRenderAsync: firstRender = {0}", firstRender));
    
    public void Dispose() =>
        Console.WriteLine("Lifecycle component disposed.");
}