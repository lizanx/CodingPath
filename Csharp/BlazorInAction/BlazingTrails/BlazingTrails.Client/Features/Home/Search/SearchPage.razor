@page "/search/{SearchTerm}"
@inject IMediator Mediator
@inject NavigationManager NavManager

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">
            Search
        </li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search results for "@SearchTerm"</h3>

<SearchFilter SearchTerm="@SearchTerm" MaxLength="MaxLength" MaxTime="MaxTime" />

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />
    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected" />
        }
    </div>
}

@code {
    [Parameter]
    public string SearchTerm { get; set; } = default!;
    [Parameter, SupplyParameterFromQuery]
    public int? MaxLength { get; set; }
    [Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }
    private IEnumerable<Trail>? _searchResults;
    private Trail? _selectedTrail;
    private IEnumerable<Trail> _cachedSearchResults = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Mediator.Send(new GetTrailsRequest());
            var allTrails = response?.Trails.Select(t => new Trail
                {
                    Id = t.Id,
                    Name = t.Name,
                    Image = t.Image ?? string.Empty,
                    Description = t.Description,
                    TimeInMinutes = t.TimeInMinutes,
                    Location = t.Location,
                    Length = t.Length
                });
            _searchResults = allTrails?.Where(trail =>
                trail.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                trail.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            _cachedSearchResults = _searchResults ?? _cachedSearchResults;

            UpdateFilters();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
        }
    }

    protected override void OnParametersSet() =>
        UpdateFilters();

    private void HandleTrailSelected(Trail trail) =>
        _selectedTrail = trail;

    private void UpdateFilters()
    {
        List<Func<Trail, bool>> filters = new();
        
        if (MaxLength is not null && MaxLength > 0)
        {
            filters.Add(trail => trail.Length <= MaxLength);
        }

        if (MaxTime is not null && MaxTime > 0)
        {
            filters.Add(trail => trail.TimeInMinutes <= MaxTime * 60);
        }

        if (filters.Any())
        {
            _searchResults = _cachedSearchResults.Where(
                trail => filters.All(filter => filter(trail))
            );
        }
        else
        {
            _searchResults = _cachedSearchResults;
        }
    }
}
