@page "/admin/tags"
@using Components.RazorComponents
@inject IBlogApi _api

<h3>Tags</h3>

<EditForm Model="Item" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
    <InputText @bind-Value="Item.Name" />
    <ValidationMessage For="@(() => Item.Name)" />
    <button class="btn btn-success" type="submit">Submit</button>
</EditForm>

<ItemList Items="Items" ItemType="Tag" DeleteEvent="@Delete" SelectEvent="@Select">
    <ItemTemplate>
        @{
            var item = context as Tag;
            if (item != null)
            {
                @item.Name
            }
        }
    </ItemTemplate>
</ItemList>

@code {
    private List<Tag> Items { get; set; } = new();
    public Tag Item { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Items = (await _api.GetTagsAsync()) ?? Items;
        await base.OnInitializedAsync();
    }

    private async Task Delete(Tag item)
    {
        try
        {
            await _api.DeleteTagAsync(item.Id!);
            Items.Remove(item);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to delete tag of id {item.Id}, exception: {e.Message}");
        }
    }

    private async Task Save()
    {
        try
        {
            await _api.SaveTagAsync(Item);
            if (!Items.Contains(Item))
                Items.Add(Item);
            Item = new();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to save tag of id {Item.Id}, exception: {e.Message}");
        }
    }

    private Task Select(Tag item)
    {
        try
        {
            Item = item;
        }
        catch
        {

        }
        return Task.CompletedTask;
    }
}
