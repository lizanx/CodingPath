@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@inject IBlogApi _api
@inject NavigationManager _manager
@using Components.RazorComponents
@using Markdig

<EditForm Model="Post" OnValidSubmit="SavePost">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
    <BlogNavigationLock @ref="NavigationLock"/>
    @* <BlogNavigationLock /> *@
    <InputText @bind-Value="Post.Title"/>
    <ValidationMessage For="() => Post.Title"/>
    <InputDate @bind-Value="Post.PublishDate"/>
    <ValidationMessage For="() => Post.PublishDate"/>
    <InputSelect @bind-Value="selectedCategory">
        <option value="0" disabled>None selected</option>
        @foreach (var c in Categories)
        {
            <option value="@c.Id">@c.Name</option>
        }
    </InputSelect>
    <ul>
        @foreach (var tag in Tags)
        {
            <li>
                @tag.Name
                @if (Post.Tags.Any(t => t.Id == tag.Id))
                {
                    <button type="button" @onclick="@(() => Post.Tags.Remove(Post.Tags.Single(t => t.Id == tag.Id)))">Remove</button>
                }
                else
                {
                    <button type="button" @onclick="@(() => Post.Tags.Add(tag))">Add</button>
                }
            </li>
        }
    </ul>
    <InputTextAreaOnInput @bind-Value="Post.Text" @onkeyup="UpdateHTML" />
    <ValidationMessage For="() => Post.Text" />
    <button type="submit" class="btn btn-success">Save</button>
</EditForm>

@((MarkupString)markdownAsHtml)

@code {
    [Parameter]
    public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category> Categories { get; set; } = new();
    List<Tag> Tags { get; set; } = new();
    string? selectedCategory = null;
    string? markdownAsHtml { get; set; }
    MarkdownPipeline pipeline = default!;
    BlogNavigationLock? NavigationLock { get; set; }

    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder().UseEmojiAndSmiley().Build();
        return base.OnInitializedAsync();
    }

    public async Task SavePost()
    {
        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null)
        {
            var category = Categories.FirstOrDefault(c => c.Id == selectedCategory);
            if (category != null)
            {
                Post.Category = category;
            }
            await _api.SaveBlogPostAsync(Post);
            NavigationLock?.CurrentEditContext.MarkAsUnmodified();
            _manager.NavigateTo("/admin/blogposts");
        }
    }

    protected void UpdateHTML()
    {
        markdownAsHtml = Markdig.Markdown.ToHtml(Post.Text, pipeline);
    }

    bool HasTag(Tag tag) => Post.Tags.Contains(tag);

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var post = await _api.GetBlogPostAsync(Id);
            if (post != null)
            {
                Post = post;
                if (Post.Category != null)
                {
                    selectedCategory = Post.Category.Id;
                }
                UpdateHTML();
            }
        }
        Categories = await _api.GetCategoriesAsync() ?? Categories;
        Tags = await _api.GetTagsAsync() ?? Tags;
        base.OnParametersSet();
    }
}
