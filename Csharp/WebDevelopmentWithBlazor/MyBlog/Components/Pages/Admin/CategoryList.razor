@page "/admin/categories"
@using Components.RazorComponents
@inject IBlogApi _api

<h3>Categories</h3>

<EditForm Model="Item" OnValidSubmit="Save">
    <DataAnnotationsValidator/>
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider"/>
    <InputText @bind-Value="Item.Name"/>
    <ValidationMessage For="@(() => Item.Name)"/>
    <button class="btn btn-success" type="submit">Submit</button>
</EditForm>

<ItemList Items="Items" ItemType="Category" DeleteEvent="@Delete" SelectEvent="@Select">
    <ItemTemplate>
        @{
            var item = context as Category;
            if (item != null)
            {
                @item.Name
            }
        }
    </ItemTemplate>
</ItemList>

@code {
    private List<Category> Items { get; set; } = new();
    public Category Item { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Items = (await _api.GetCategoriesAsync()) ?? Items;
        await base.OnInitializedAsync();
    }

    private async Task Delete(Category item)
    {
        try
        {
            await _api.DeleteCategoryAsync(item.Id!);
            Items.Remove(item);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to delete category of id {item.Id}, exception: {e.Message}");
        }
    }

    private async Task Save()
    {
        try
        {
            await _api.SaveCategoryAsync(Item);
            if (!Items.Contains(Item))
                Items.Add(Item);
            Item = new();
        }
        catch (Exception e)
        {
            Console.WriteLine($"Failed to save category of id {Item.Id}, exception: {e.Message}");
        }
    }

    private Task Select(Category item)
    {
        try
        {
            Item = item;
        }
        catch
        {

        }
        return Task.CompletedTask;
    }
}
