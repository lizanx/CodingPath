@page "/post/{BlogPostId}"
@using Components.Interfaces
@inject IBlogNotificationService notificationService
@inject IBlogApi _api
@inject NavigationManager _navman
@using Markdig
@implements IDisposable

@if (BlogPost != null)
{
    <PageTitle>@BlogPost.Title</PageTitle>
    <HeadContent>
        <meta property="og:title" content="@BlogPost.Title"/>
        <meta property="og:description" content="@(new string(BlogPost.Text.Take(100).ToArray()))"/>
        <meta property="og:image" content="@($"{_navman.BaseUri}/icon.png")"/>
        <meta property="og:url" content="@_navman.BaseUri"/>
    </HeadContent>

    <h2>@BlogPost.Title</h2>
    @((MarkupString)Markdig.Markdown.ToHtml(BlogPost.Text, pipeline))
}

@code {
    [Parameter]
    public string BlogPostId { get; set; }

    public BlogPost? BlogPost { get; set; }

    MarkdownPipeline pipeline;

    protected override Task OnInitializedAsync()
    {
        notificationService.BlogPostChanged += PostChanged;
        pipeline = new MarkdownPipelineBuilder().UseEmojiAndSmiley().Build();
        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        BlogPost = await _api.GetBlogPostAsync(BlogPostId);
        await base.OnParametersSetAsync();
    }

    private async void PostChanged(BlogPost post)
    {
        if (BlogPost?.Id == post.Id)
        {
            BlogPost = post;
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

    void IDisposable.Dispose()
    {
        notificationService.BlogPostChanged -= PostChanged;
    }
}
